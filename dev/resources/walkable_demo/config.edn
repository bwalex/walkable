{:duct.core/project-ns walkable-demo

 :duct.core/environment :production

 ;;:duct.server.http/jetty {:port 3002}

 :duct.module/logging {}

 :duct.module.web/site {}

 ;; Clojurescript
 :duct.module/cljs {:main walkable-demo.client}
 :dev/devcards     {}

 :duct.middleware.web/defaults {:security {:anti-forgery false}}

 :duct.module/ataraxy
 {"/api" ^:wrap-defaults ^:wrap-format [:example/fulcro]}

 :duct.router/ataraxy
 {:middleware {:wrap-format   #ig/ref :duct.middleware.web/format
               :wrap-defaults #ig/ref :duct.middleware.web/defaults}}

 :duct.middleware.web/format {:default-format "application/transit+json"}

 :duct.migrator/ragtime
 {:migrations [#ig/ref :walkable-demo.migration.case-1/create-cow-table
               #ig/ref :walkable-demo.migration.case-1/create-farmer-table

               #ig/ref :walkable-demo.migration.case-2/create-kid-table
               #ig/ref :walkable-demo.migration.case-2/create-toy-table

               #ig/ref :walkable-demo.migration.case-3/create-person-table
               #ig/ref :walkable-demo.migration.case-3/create-pet-table
               #ig/ref :walkable-demo.migration.case-3/create-person_pet-table

               #ig/ref :walkable-demo.migration.case-4/create-human-table
               #ig/ref :walkable-demo.migration.case-4/create-follow-table
               ]}
 ;; case 1 migrations
 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-1/create-cow-table]
 {:up   ["CREATE TABLE `cow` (`index` SERIAL PRIMARY KEY, `color` TEXT)"
         "INSERT INTO `cow` (`index`, `color`) VALUES (10, 'black'), (20, 'brown')"]
  :down ["DROP TABLE `cow`"]}

 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-1/create-farmer-table]
 {:up   ["CREATE TABLE `farmer` (`number` SERIAL PRIMARY KEY, `cow_index` INTEGER REFERENCES `cow`(`index`), `name` TEXT)"
         "INSERT INTO `farmer` (`number`, `name`, `cow_index`) VALUES (1, 'jon', 10), (2, 'mary', 20)"]
  :down ["DROP TABLE `farmer`"]}


 ;; case 2 migrations
 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-2/create-kid-table]
 {:up   ["CREATE TABLE `kid` (`number` SERIAL PRIMARY KEY, `name` TEXT)"
         "INSERT INTO `kid` (`number`, `name`) VALUES (1, 'jon'), (2, 'mary')"]
  :down ["DROP TABLE `kid`"]}

 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-2/create-toy-table]
 {:up   ["CREATE TABLE `toy` (`index` SERIAL PRIMARY KEY, `owner_number` INTEGER REFERENCES `kid`(`number`), `color` TEXT)"
         "INSERT INTO `toy` (`index`, `color`, `owner_number`) VALUES (10, 'yellow', 1), (20, 'green', 2)"]
  :down ["DROP TABLE `toy`"]}

 ;; case 3 migrations
 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-3/create-person-table]
 {:up   ["CREATE TABLE `person` (`number` SERIAL PRIMARY KEY, `name` TEXT, `yob` INTEGER, `secret` TEXT, `hidden` BOOLEAN)"
         "INSERT INTO `person` (`number`, `name`, `yob`, `secret`, `hidden`) VALUES (1, 'jon', 1980, 'only jon knows', 1), (2, 'mary', 1992, 'surprise', 0)" ]
  :down ["DROP TABLE `person`"]}

 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-3/create-pet-table]
 {:up   ["CREATE TABLE `pet` (`index` SERIAL PRIMARY KEY, `color` TEXT, `yob` INTEGER, `private` TEXT)"
         "INSERT INTO `pet` (`index`, `color`, `yob`, `private`) VALUES (10, 'yellow', 2015, 'you bastard'), (20, 'green', 2016, 'idk')"]
  :down ["DROP TABLE `pet`"]}

 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-3/create-person_pet-table]
 {:up   ["CREATE TABLE `person_pet` (`id` SERIAL PRIMARY KEY, `person_number` INTEGER REFERENCES `person`(`number`), `pet_index` INTEGER REFERENCES `pet`(`index`), `adoption_year` INTEGER)"
         "INSERT INTO `person_pet` (`person_number`, `pet_index`, `adoption_year`) VALUES (1, 10, 2015), (2, 20, 2017)"]
  :down ["DROP TABLE `person_pet`"]}

 ;; case 4 migrations
 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-4/create-human-table]
 {:up   ["CREATE TABLE `human` (`number` SERIAL PRIMARY KEY, `name` TEXT, `yob` INTEGER)"
         "INSERT INTO `human` (`number`, `name`, `yob`) VALUES (1, 'jon', 1980), (2, 'mary', 1992), (3, 'peter', 1989), (4, 'sandra', 1970)" ]
  :down ["DROP TABLE `human`"]}

 [:duct.migrator.ragtime/sql :walkable-demo.migration.case-4/create-follow-table]
 {:up   ["CREATE TABLE `follow` (`human_1` INTEGER REFERENCES `human`(`number`), `human_2` INTEGER REFERENCES `human`(`number`), `year` INTEGER)"
         "INSERT INTO `follow` (`human_1`, `human_2`, `year`) VALUES (1, 2, 2015), (1, 3, 2017), (2, 1, 2014), (2, 3, 2015), (1, 4, 2012)"]
  :down ["DROP TABLE `follow`"]}

 :walkable-demo.handler.example/sql-schema
 { ;; which columns are available in SQL table?
  :columns          [:person/number
                     :person/name
                     :person/yob
                     :person/hidden
                     :person-pet/person-number
                     :person-pet/pet-index
                     :pet/index
                     :pet/yob
                     :pet/color]
  ;; extra columns required when an attribute is being asked for
  ;; can be input to derive attributes, or parameters to other attribute resolvers that will run SQL queries themselves
  :required-columns {:pet/age     #{:pet/yob}
                     :person/age  #{:person/yob}}
  :idents           {:person/by-id [:= :person/number]
                     :people/all   "person"}
  :extra-conditions {[:people/all :person/by-id]
                     [:or {:person/hidden [:= true]}
                      {:person/hidden [:= false]}]}
  :joins            {:person/pet [:person/number :person-pet/person-number
                                  :person-pet/pet-index :pet/index]}
  :reversed-joins   {:pet/owner :person/pet}
  :join-cardinality {:person/by-id :one
                     :person/pet   :many}}

 :walkable-demo.handler.example/run-query {}

 :walkable-demo.handler.example/fulcro

 #:walkable.sql-query-builder
 {:duct/logger #ig/ref :duct/logger
  :run-query   #ig/ref :walkable-demo.handler.example/run-query
  :sql-db      #ig/ref :duct.database.sql/hikaricp
  :sql-schema  #ig/ref :walkable-demo.handler.example/sql-schema}}
